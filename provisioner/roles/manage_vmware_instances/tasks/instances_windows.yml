################### Build Instances ###################
- name: Windows | Launch instance 1
  vmware_guest2:
    hostname: "{{ vCenterServer }}"
    username: "{{ vCenterUsername }}"
    password: "{{ vCenterPassword }}"
    datacenter: "{{ vCenterDatacenter }}"
    cluster: "{{ vCenterCluster }}"
    folder: "{{ vCenterFolder }}"
    name: "{{ ec2_name_prefix }}-s{{ item }}-win1"
    template: "{{ vmware_windows_template }}"
    snapshot_src: "{{ VCenterCloneSnapshotWindows | default(omit, True) }}"
    linked_clone: "{{ VCenterLinkedClone | default(omit, True) }}"
    state: poweredon
    wait_for_ip_address: true
    validate_certs: false
    networks:
    - name: "{{ vCenterPortGroupExt }}"
      type: dhcp
    customization:
      autologon: True
      orgname: Workshop
      fullname: Workshop
      hostname: "s{{ item }}-win1"
      # timezone 20 = Central Standard Time
      # For more info see https://msdn.microsoft.com/en-us/library/ms912391(v=winembedded.11).aspx[msdn.microsoft.com]
      timezone: 20
      password: "{{ admin_password }}"
      runonce:
      - powershell.exe -command "Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private"
      - powershell.exe -command "Invoke-WebRequest -Uri https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1 -OutFile C:\ConfigureRemotingForAnsible.ps1"
      - powershell.exe -ExecutionPolicy Unrestricted -File C:\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert -EnableCredSSP
      - powershell.exe -command "Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0"
      - powershell.exe -command "Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters' -Name 'DisabledComponents' -PropertyType DWord -Value 0xff"
      - powershell.exe -command "Enable-NetFirewallRule -DisplayGroup 'Remote Desktop'"
      - winrm set winrm/config/service/auth @{Basic="true"}
      - winrm set winrm/config/service @{AllowUnencrypted="true"}
  with_sequence: count={{ student_total }}
  register: windows1_jobs
  async: 7200
  poll: 0

- name: Tower | Launch Tower Instance
  vmware_guest2:
    hostname: "{{ vCenterServer }}"
    username: "{{ vCenterUsername }}"
    password: "{{ vCenterPassword }}"
    datacenter: "{{ vCenterDatacenter }}"
    cluster: "{{ vCenterCluster }}"
    folder: "{{ vCenterFolder }}"
    name: "{{ ec2_name_prefix }}-s{{ item }}-tower"
    template: "{{ vmware_tower_template }}"
    snapshot_src: "{{ VCenterCloneSnapshotLinux | default(omit, True) }}"
    linked_clone: "{{ VCenterLinkedClone | default(omit, True) }}"
    state: poweredon
    wait_for_ip_address: true
    validate_certs: false
    hardware:
      memory_mb: 4096
      num_cpus: 2
    networks:
    - name: "{{ vCenterPortGroupExt }}"
      type: dhcp
    customization:
      hostname: "s{{ item }}-tower"
  with_sequence: count={{ student_total }}
  register: tower_jobs
  async: 7200
  poll: 0

- name: GitLab | Launch Gitlab Instance
  vmware_guest2:
    hostname: "{{ vCenterServer }}"
    username: "{{ vCenterUsername }}"
    password: "{{ vCenterPassword }}"
    datacenter: "{{ vCenterDatacenter }}"
    cluster: "{{ vCenterCluster }}"
    folder: "{{ vCenterFolder }}"
    name: "{{ ec2_name_prefix }}-gitlab"
    template: "{{ vmware_gitlab_template }}"
    snapshot_src: "{{ VCenterCloneSnapshotLinux | default(omit, True) }}"
    linked_clone: "{{ VCenterLinkedClone | default(omit, True) }}"
    state: poweredon
    wait_for_ip_address: true
    validate_certs: false
    hardware:
      memory_mb: 4096
      num_cpus: 2
    networks:
    - name: "{{ vCenterPortGroupExt }}"
      type: dhcp
    customization:
      hostname: gitlab
  with_sequence: count=1
  register: gitlab_jobs
  async: 7200
  poll: 0

#- name: Docs | Launch Docs Instance
#  vmware_guest2:
#    hostname: "{{ vCenterServer }}"
#    username: "{{ vCenterUsername }}"
#    password: "{{ vCenterPassword }}"
#    datacenter: "{{ vCenterDatacenter }}"
#    cluster: "{{ vCenterCluster }}"
#    folder: "{{ vCenterFolder }}"
#    name: "{{ ec2_name_prefix }}-docs"
#    template: "{{ vmware_docs_template }}"
#    snapshot_src: "{{ VCenterCloneSnapshotLinux | default(omit, True) }}"
#    linked_clone: "{{ VCenterLinkedClone | default(omit, True) }}"
#    state: poweredon
#    wait_for_ip_address: true
#    validate_certs: false
#    hardware:
#      memory_mb: 4096
#      num_cpus: 2
#    networks:
#    - name: "{{ vCenterPortGroupExt }}"
#      type: dhcp
#    customization:
#      hostname: docs
#  with_sequence: count=1
#  register: docs_jobs
#  async: 7200
#  poll: 0

###################  Wait for jobs to complete ###################

- name: Wait for tower instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: tower_instances
  until: tower_instances.finished
  retries: 300
  with_items: "{{ tower_jobs.results }}"

- name: Wait for Gitlab instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: gitlab_instances
  until: gitlab_instances.finished
  retries: 300
  with_items: "{{ gitlab_jobs.results }}"

#- name: Wait for Docs instance creation to complete
#  async_status: jid="{{ item.ansible_job_id }}"
#  register: docs_instances
#  until: docs_instances.finished
#  retries: 300
#  with_items: "{{ docs_jobs.results }}"

- name: Wait for windows instance creation to complete
  async_status: jid="{{ item.ansible_job_id }}"
  register: windows_instances
  until: windows_instances.finished
  retries: 300
  with_items:
    - "{{ windows1_jobs.results }}"

################### Add hosts ######################

- name: Tower | Add new instance to host group
  add_host:
    hostname: "{{ item.hw_name | replace(ec2_name_prefix + '-', '') }}"
    ansible_ssh_host: "{{ item.ipv4 }}"
    ansible_host: "{{ item.ipv4 }}"
    private_ip: "{{ item.ipv4 }}"
    ansible_user: "{{ root_user }}"
    ansible_password: "{{ admin_password }}"
    username: "student{{ item.hw_name | replace(ec2_name_prefix + '-', '') | regex_replace('[^0-9]', '') }}"
    short_name: "{{ item.hw_name | replace(ec2_name_prefix + '-', '') }}"
    student: "{{ item.hw_name | replace(ec2_name_prefix + '-', '') | regex_replace('[^0-9]', '') }}"
    groups:
      - tower
      - control_nodes
  with_items: "{{ tower_instances.results | map(attribute='instance') | list }}"

- name: GitLab | Add new instance to host group
  add_host:
    hostname: "gitlab"
    ansible_ssh_host: "{{ item.ipv4 }}"
    ansible_host: "{{ item.ipv4 }}"
    private_ip: "{{ item.ipv4 }}"
    ansible_user: "{{ root_user }}"
    ansible_password: "{{ admin_password }}"
    username: "{{ root_user }}"
    short_name: "{{ item.hw_name | replace(ec2_name_prefix + '-', '') }}"
    groups:
      - rhel
      - gitlab
  with_items: "{{ gitlab_instances.results | map(attribute='instance') | list }}"

#- name: Docs | Add new instance to host group
#  add_host:
#    hostname: "docs"
#    ansible_ssh_host: "{{ item.hw_eth0.ipaddresses[0] }}"
#    ansible_host: "{{ item.hw_eth0.ipaddresses[0] }}"
#    private_ip: "{{ item.hw_eth0.ipaddresses[0] }}"
#    public_ip: "{{ item.hw_eth0.ipaddresses[0] }}"
#    ansible_user: "{{ root_user }}"
#    ansible_password: "{{ admin_password }}"
#    username: "{{ root_user }}"
#    short_name: "{{ item.hw_name | replace(ec2_name_prefix + '-', '') }}"
#    groups: docs
#  with_items: "{{ docs_instances.results | map(attribute='instance') | list }}"

- name: Windows | Add new instance to host group
  add_host:
    hostname: "{{ item.hw_name | replace(ec2_name_prefix + '-', '') }}"
    ansible_host: "{{ item.ipv4  }}"
    student: "{{ item.hw_name | replace(ec2_name_prefix + '-', '') | regex_replace('[^0-9]', '') }}"
    private_ip: "{{ item.ipv4 }}"
    ansible_port: 5986
    ansible_user: "Administrator"
    ansible_password: "{{ admin_password }}"
    ansible_connection: winrm
    ansible_winrm_transport: "ntlm"
    ansible_winrm_server_cert_validation: "ignore"
    ansible_become: false
    username: "student{{ item.hw_name | replace(ec2_name_prefix + '-', '') | regex_replace('[^0-9]', '') }}"
    short_name: "{{ item.hw_name | replace(ec2_name_prefix + '-', '') }}"
    groups:
      - windows
  with_items: "{{ windows_instances.results | map(attribute='instance') | list }}"

